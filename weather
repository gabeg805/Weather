#!/bin/env python2.7
## **********************************************************************************
## 
## Name:    weather
## Author:  Gabriel Gonzalez
## Email:   gabeg@bu.edu
## License: The MIT License (MIT)
## 
## Syntax: weather 
## 
## Description: Use the Weather Underground API to display useful weather information
##              at the given zipcode. 
##              
## Notes: None.
## 
## **********************************************************************************



## ##########################
## ##### IMPORT MODULES #####
## ##########################

from sys import argv
import urllib2 
import json 



## #######################################
## ##### DISPLAY WEATHER INFORMATION #####
## #######################################

## Display weather information
def main():
    
    validInputParameters()
    
    url         = get_website()
    api         = urllib2.urlopen(url)
    json_string = api.read()
    parsed_json = json.loads(json_string)
    
    validZipcode(parsed_json)
    
    displayWeather(parsed_json)
    
    if ( isExtraInfo() ):
        displayExtraInfo(parsed_json)
    
    displayLastUpdated(parsed_json)
    
    api.close()



## ###############################
## ##### PRINT PROGRAM USAGE #####
## ###############################

## Print program usage
def usage():
    print("Usage: %s [option <argument>]" % (argv[0]))
    print("")
    print("Commands:")
    print("    zipcode       The 6 digit zipcode of a location")
    print("")
    print("Options:")
    print("    -i, --info    Print extra weather information")
    exit(0)



## ##############################
## ##### PRINT WEATHER DATA #####
## ##############################

## Display weather information
def displayWeather(parsed_json):
    num      = get_hours()
    city     = parsed_json['location']['city']
    state    = parsed_json['location']['state']
    zipcode  = parsed_json['location']['zip']
    now_forecast = parsed_json['current_observation']['weather']
    now_temp     = parsed_json['current_observation']['temp_f']
    now_feels    = parsed_json['current_observation']['feelslike_f']
    later_forecast = parsed_json['hourly_forecast'][num-1]['condition']
    later_temp     = parsed_json['hourly_forecast'][num-1]['temp']['english']
    later_feels    = parsed_json['hourly_forecast'][num-1]['feelslike']['english']
    
    ## Weather information to print
    location    = "%s, %s %s" % (city, state, zipcode)
    weather     = "%s" % (now_forecast)
    temperature = "%s/%s" % (now_temp, now_feels)
    
    ## Determine how much to pad the strings
    i = len(weather)
    j = len(temperature)
    
    if ( i > j ):
        pad = i+4
    else:
        pad = j+4
    
    ## Print later weather information
    if ( isLaterWeather() ):
        weather     = "%s->    %s"    % (weather.ljust(pad),     later_forecast)
        temperature = "%s->    %s/%s" % (temperature.ljust(pad), later_temp, later_feels)
    
    print("Location: %s" % (location))
    print("")
    print("Weather:  %s" % (weather))
    print("Temp:     %s" % (temperature))
    print("")
    
    # future_prob = parsed_json['hourly_forecast'][num-1]['pop']
    # future_time = parsed_json['hourly_forecast'][num-1]['FCTTIME']['pretty']
    # print future_time



## Display extra weather information
def displayExtraInfo(parsed_json):
    precip    = parsed_json['current_observation']['precip_today_in']
    humidity  = parsed_json['current_observation']['relative_humidity']
    windSpeed = parsed_json['current_observation']['wind_mph']
    windChill = parsed_json['current_observation']['windchill_f']
    elevation = parsed_json['current_observation']['observation_location']['elevation']
    
    risehr    = parsed_json['sun_phase']['sunrise']['hour'].zfill(2)
    risemin   = parsed_json['sun_phase']['sunrise']['minute'].zfill(2)
    sethr     = parsed_json['sun_phase']['sunset']['hour'].zfill(2)
    setmin    = parsed_json['sun_phase']['sunset']['minute'].zfill(2)
    
    print("Precip:   %s in" % (precip))
    print("Humidity: %s" % (humidity))
    print("Wind Speed: %s mph" % (windSpeed))
    print("Wind Chill: %s in" % (windChill))
    print("")
    print("Sunrise: %s:%s" % (risehr, risemin))
    print("Sunset:  %s:%s" % (sethr, setmin))
    print("")



## Display last updated time
def displayLastUpdated(parsed_json):
    time = parsed_json['current_observation']['observation_time']
    print("%s" % (time))



## ########################################
## ##### RETRIEVE WEATHER INFORMATION #####
## ########################################

## Return Wunderground website address
def get_website():
    flag    = False
    index   = getIndex("-z", "--zipcode", argv)
    zipcode = argv[index+1]
    
    if ( len(zipcode) == 5 ):
        try:
            zipcode = int(zipcode)
        except:
            flag = True
    else:
        flag = True
    
    if ( flag or (index == -1) ):
        print("%s: Invalid zipcode entered." % (argv[0]))
        print("")
        usage()
    
    web = "http://api.wunderground.com"
    app = "/api/30e9ab88be150d93/alerts/astronomy/conditions/geolookup/hourly/q/"
    ext = ".json"
    url = "%s%s%s%s" % (web, app, zipcode, ext)
    
    return url



## Return number of hours to print future weather
def get_hours():
    flag  = False
    index = getIndex("-t", "--time", argv)
    
    if ( index == -1 ):
        return 0
    
    hours = argv[index+1]
    
    try:
        hours = int(hours)
    except:
        flag = True
    
    if (flag) or (hours < 0) or (hours > 36):
        print("%s: Invalid number of hours '%s' entered." % (argv[0], hours))
        print("")
        usage()
    
    return hours



## #########################
## ##### CHECK ZIPCODE #####
## #########################

## Check if input parameters are valid
def validInputParameters():
    n       = len(argv)
    flag    = True
    message = ""
    
    if ( n == 1 ):
        usage()
    elif ( n == 2 ):
        if ( ("-h" in argv) or ("--help" in argv) ):
            usage()
        message = "Too few arguments"
    elif ( n == 3):
        flag = False
    elif ( n == 4 ):
        if ( isExtraInfo() ):
            flag = False
        else:
            message = "Invalid input parameters"
    elif ( n == 5 ):
        if ( isLaterWeather() ):
            flag = False
        else:
            message = "Invalid input parameters"
    elif ( n == 6 ):
        if ( isExtraInfo() and isLaterWeather() ):
            flag = False
        else:
            message = "Invalid input parameters"
    else:
        message = "Too many arguments"
    
    if ( flag ):
        print("%s: %s." % (argv[0], message))
        print("")
        usage()



## Check if the input zipcode corresponds to an actual location
def validZipcode(parsed_json):
    try:
        error = parsed_json['response']['error']['type']
        if 'querynotfound' in error: 
            print("%s: No cities match the zipcode '%s'" % (argv[0], argv[1]))
            print("")
            usage()
            exit(1)
    except:
        pass



## Check if extra weather info should be printed
def isExtraInfo():
    if ( ("-i" in argv) or ("--info" in argv) ):
        return True
    else:
        return False



## Check if later weather should be printed
def isLaterWeather():
    if ( ("-t" in argv) or ("--time" in argv) ):
        return True
    else:
        return False



## Return the index at which the input occurs
def getIndex(i, j, arr):
    if ( i in arr ):
        return (arr.index(i))
    elif ( j in arr ):
        return (arr.index(j))
    else:
        return -1



## ---------------------------
## Display Weather Information
## ---------------------------

main()
