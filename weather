#!/usr/bin/env python2.7
# ******************************************************************************
# 
# Name:    weather
# Author:  Gabriel Gonzalez
# Email:   gabeg@bu.edu
# License: The MIT License (MIT)
# 
# Syntax: weather
# 
# Description: Display weather information at a given zipcode, using the Weather
#              Underground API.
# 
# Notes: None.
# 
# ******************************************************************************

# Imports
import argparse
import json 
import os
import sys
import urllib2 

# Globals
PROG = os.path.basename(sys.argv[0])

# Options
ZIPCODE = '22202'

# Exit statuses
EZIP  = 10
EFTRT = 11

# ******************************************************************************
# Main
def main():
    desc   = 'Display weather information at a given zipcode.'
    parser = argparse.ArgumentParser(prog=PROG,
                                     description=desc,
                                     usage=usage(),
                                     add_help=False)

    # Parse options
    parser.add_argument('-h', '--help',    action='help')
    parser.add_argument('-p', '--print-weather', action='store_true', required=True)
    parser.add_argument('-z', '--zipcode', action='store', default=ZIPCODE)
    parser.add_argument('-f', '--future',  action='store')
    parser.add_argument('-e', '--extra',   action='store_true')
    args = parser.parse_args()

    # Check inputs
    if (not is_zipcode(args.zipcode)):
        print "%s: Invalid zipcode entered '%s'." % (PROG, args.zipcode)
        exit(EZIP)
    if ((args.future is not None) and (not is_future_time(args.future))):
        print "%s: Invalid future time entered '%s'." % (PROG, args.future)
        exit(EFTRT)

    # Download weather information
    website = get_weather_website(args.zipcode)
    socket  = urllib2.urlopen(website)
    jstring = socket.read()
    pjson   = json.loads(jstring)
    print_weather(args, pjson)
    socket.close()

# ******************************************************************************
# Print program usage
def usage():
    string  = "Usage: %s [options] <argument>\n" % (PROG)
    string += "\n"
    string += "Options:\n"
    string += "    -h, --help                 Print the program usage message\n"
    string += "    -z, --zipcode <zipcode>    Print weather information\n"
    string += "    -f, --future <time>        Display future weather information\n"
    string += "    -e, --extra                Print extra weather information\n"
    string += "\n"
    string += "Arguments:\n"
    string += "    <zipcode>                  A 5 digit zipcode\n"
    string += "    <time>                     Number of hours\n"
    return string

# ******************************************************************************
# Print all weather information
def print_weather(args, pjson):
    # Check API query
    if (not is_api_query(pjson)):
        print "%s: No city found matching zipcode '%s'." % (PROG, args.zipcode)
        exit(EZIP)

    # Print weather
    print_weather_info(pjson)
    print_last_updated_time(pjson)
    print_future_weather_info(pjson, args.future)
    print_extra_weather_info(pjson, args.extra)

    return 0

# ******************************************************************************
# Print weather information
def print_weather_info(pjson):
    city     = pjson['location']['city']
    state    = pjson['location']['state']
    zipcode  = pjson['location']['zip']
    forecast = pjson['current_observation']['weather']
    temp     = pjson['current_observation']['temp_f']
    feels    = pjson['current_observation']['feelslike_f']

    # Print info
    print '%s, %s %s' % (city, state, zipcode)
    print
    print '%s' % (forecast)
    print '%s' % (temp), u'\u00b0F', '/', '%s' % (feels), u'\u00b0F'

    return 0

# ******************************************************************************
# Print future weather information
def print_future_weather_info(pjson, future):
    if (future is None):
        return 1

    print
    print '---------------------'
    print '   Future Forecast   '
    print '---------------------'

    # Loop through number of hours in future
    hours    = get_future_hours(future)
    for h in range(0, hours):
        forecast = pjson['hourly_forecast'][h]['condition']
        temp     = pjson['hourly_forecast'][h]['temp']['english']
        feels    = pjson['hourly_forecast'][h]['feelslike']['english']
        ftime = pjson['hourly_forecast'][h]['FCTTIME']['pretty']

        # Print future info
        print
        print '%s' % (ftime)
        print '%s' % (forecast)
        print '%s' % (temp), u'\u00b0F', '/', '%s' % (feels), u'\u00b0F'

    return 0

# ******************************************************************************
# Print extra weather information
def print_extra_weather_info(pjson, extra):
    if (not is_extra_info(extra)):
        return 1

    precip    = pjson['current_observation']['precip_today_in']
    humidity  = pjson['current_observation']['relative_humidity']
    windspeed = pjson['current_observation']['wind_mph']
    windchill = pjson['current_observation']['windchill_f']
    elevation = pjson['current_observation']['observation_location']['elevation']
    risehr    = pjson['sun_phase']['sunrise']['hour'].rjust(2)
    risemin   = pjson['sun_phase']['sunrise']['minute'].zfill(2)
    sethr     = pjson['sun_phase']['sunset']['hour']
    setmin    = pjson['sun_phase']['sunset']['minute'].zfill(2)
    if (int(sethr) > 12):
        sethr = ' '+str(int(sethr) - 12)

    print
    print '-----------------------'
    print '   Extra Information   '
    print '-----------------------'
    print
    print '%-12s: %s:%s AM' % ('Sunrise', risehr, risemin)
    print '%-12s: %s:%s PM' % ('Sunset', sethr, setmin)
    print
    print '%-12s: %s in' % ('Precip.', precip)
    print '%-12s: %s mph' % ('Wind Speed', windspeed)
    print '%-12s: %s' % ('Wind Chill', windchill), u'\u00b0F'
    print '%-12s: %s' % ('Humidity', humidity)

    return 0

# ******************************************************************************
# Print last updated time
def print_last_updated_time(pjson):
    print
    print '%s' % pjson['current_observation']['observation_time']
    return 0

# ******************************************************************************
# Return Weather Underground website URL
def get_weather_website(zipcode):
    web = "http://api.wunderground.com"
    app = "/api/30e9ab88be150d93/alerts/astronomy/conditions/geolookup/hourly/q/"
    ext = ".json"
    url = "%s%s%s%s" % (web, app, zipcode, ext)
    return url

# ******************************************************************************
# Return future time in hours
def get_future_hours(future):
    unit  = future[-1]
    scale = 1
    if (unit == 'h'):
        scale = 1
    elif (unit == 'd'):
        scale = 24
    else:
        return -1

    return int(future[:-1])*scale

# ******************************************************************************
# Check if any errors occurred with querying for data
def is_api_query(pjson):
    try:
        error = pjson['response']['error']['type']
        if ('querynotfound' in error): 
            return False
    except:
        pass
    return True

# ******************************************************************************
# Check if valid zipcode
def is_zipcode(zipcode):
    try:
        tmp = int(zipcode)
    except ValueError:
        return False

    if (len(zipcode) != 5):
        return False

    return True

# ******************************************************************************
# Check if valid future time
def is_future_time(ftime):
    if (ftime is None):
        return False

    unit = ftime[-1]
    if ((unit == 'h') or (unit == 'd')):
        pass
    else:
        return False

    try:
        tmp = int(ftime[:-1])
    except ValueError:
        return False

    return True

# ******************************************************************************
# Check if extra info should be printed
def is_extra_info(extra):
    return extra

# ******************************************************************************
# Run script
main()
