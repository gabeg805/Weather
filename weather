#!/bin/bash
## 
## CREATED BY: Gabriel Gonzalez (contact me at gabeg@bu.edu)
## 
## 
## NAME:
## 	
## 	   weather
## 
## 
## SYNTAX: 
## 	  
## 	   weather [ -h ] [ -p ZIPCODE HOUR(s) ]  
## 
## 
## PURPOSE:
## 	
## 	   Displays weather of the location given. Is also capable of storing the weather
##     data and plotting the temperature as a function of time for the default zipcode.
## 
## 
## KEYWORDS:
## 	
##     ZIPCODE - zipcode of the location where the user wants weather information
##     HOUR(s) - number of hours in the future to print future weather
## 
## 	   -h      - shows the help screen
## 	   -p      - prints the weather information for the default zip code or 
## 	             the user inputted zip code
## 
## 
## FUNCTIONS:
## 	
##     help_screen     - Print the help screen
## 
##     is_connected    - Check if connected to the internet
## 
##     get_item        - Parse python script output to get specific weather data
##     current_weather - Print current weather information
##     future_weather  - Print future weather information
##     misc_weather    - Print miscellaneous weather information
##     weather_info    - Print all weather information
## 
##     main            - Display weather information
## 
## 
## FILE STRUCTURE:
##   
##     * Print Help Message
##     * Check Internet Connection
##     * Get Python Script Output
##     * Display Weather Information
##     
##     
## MODIFICATION HISTORY:
## 	
## 	   gabeg Sep 19 2013 <> created
## 
##     gabeg Jul 11 2014 <> added more functions to increase readability 
##
##     gabeg Jul 23 2014 <> removed plotting capabilities 
##
## **********************************************************************************



## ##############################
## ##### PRINT HELP MESSAGE ##### 
## ##############################

## Print the user help screen
function help_screen {
    
    ## Preliminary Variables
    local file="$0"
    local first=(`sed 's/^$/  /; s/^/\`/' "$file" | grep -o -E '^\`..'`)
    
    local j=0
    
    for i in "${first[@]}"; do 
        if [[ "$i" == '`##' || "$i" == '`#!' ]]; then :; else break; fi
        j=$[ $j + 1 ]
    done
    
    head -"$j" "$file" | less
    exit
}



## #####################################
## ##### CHECK INTERNET CONNECTION ##### 
## #####################################

## Check if connected to the internet
function is_connected {
    
    ## Wireless check
    local wirelessCheck=`ip link show wlp1s0 | cut -f2 -d'>' | grep -c 'UP'`
    
    ## Ethernet check
    local ethernetCheck=`ip link show enp3s0 | cut -f2 -d'>' | grep -c 'UP'`
    
    
    ## Return boolean
    if [ $wirelessCheck -eq 1 -o $ethernetCheck -eq 1 ]; then
        echo true
    else
        echo false
    fi
}



## ####################################
## ##### GET PYTHON SCRIPT OUTPUT #####
## ####################################

## Get requested item from python weather script output
function get_item {
    
    ## Python weather output
    local output=("$@")
    
    ## User search
    local n=$[ ${#output[@]} - 1 ]
    local search="${output[$n]}"
    
    ## Return output
    echo "${output[*]}" | grep "$search ~" | cut -f2 -d'~' | sed 's/^[ \t]*//'
}



## Print current weather conditions
function current_weather {
    
    ## Print colors
    local red=`tput setaf 1`
    local gold=`tput setaf 3`
    local reset=`tput sgr0`
    
    ## Current weather information
    local all=("$@")
    local city=`get_item "${all[@]}" 'City'`
    local state=`get_item "${all[@]}" 'State'`
    local temp=`get_item "${all[@]}" 'Temp' | head -1`
    local feels=`get_item "${all[@]}" 'Feels' | head -1`
    local weather=`get_item "${all[@]}" 'Weather' | head -1`
    local updatetime=`get_item "${all[@]}" 'Time' | head -1 | sed 's/Last Updated on //; s/,/ -/'`
    
    ## Print message
    echo -e "$red$city, $state$reset" \
          "\n\n""$updatetime" \
          "\n\t""$gold$weather" \
          "\n\t""$temp$deg/$feels F$reset"
}



## Print future weather conditions
function future_weather {
    
    ## Print colors
    local gold=`tput setaf 3`
    local reset=`tput sgr0`
    
    ## Current weather information
    local all=("$@")
    local temp=(`get_item "${all[@]}" 'Future Temp'`)
    local feels=(`get_item "${all[@]}" 'Future Feels'`)
    local weather=(`get_item "${all[@]}" 'Future Weather'`)
    local updatetime=(`get_item "${all[@]}" 'Future Time'`)
    
    ## Array number of elements
    n=$[ ${#weather[@]} - 1 ]
    
    ## Print message
    for i in `seq 0 $n`; do
        local wholepart=`echo "${updatetime[$i]}" | cut -f1 -d','`
        local datepart=`echo "$wholepart" | sed 's/^.*.on //'`
        local timepart=`echo "$wholepart" | sed "s/ on $datepart//"`
        local newtime="$datepart - $timepart"
        
        echo -e "\n""$newtime" \
              "\n\t""$gold${weather[$i]}" \
              "\n\t""${temp[$i]}/${feels[$i]} F$reset"
    done
}



## Print miscellanesou weather information
function misc_weather {
    
    ## Miscellaneous weather information
    local all=("$@")
    local precip=`get_item "${all[@]}" 'Precipitation'`
    local humidity=`get_item "${all[@]}" 'Humidity'`
    local windSpeed=`get_item "${all[@]}" 'Wind Speed'`
    local windChill=`get_item "${all[@]}" 'Wind Chill'`
    local elevation=`get_item "${all[@]}" 'Elevation'`
    local solarrad=`get_item "${all[@]}" 'Solar Radiation'`
}



## Print weather information
function weather_info {
    
    ## Change array delimeter
    local IFS=$'\n'
    
    ## Execute python script
    local pyapi="/mnt/Linux/Share/scripts/programs/weather/src/wuapi.py"
    local all=(`python2.7 "$pyapi" "$1" "$2" | sed 's/^[ \t]*//'`)
    
    ## Print python script output 
    echo "Using zipcode $1..."
    
    local checkWeather=`echo "${all[@]}" | grep -c 'ERROR'`
    if [ $checkWeather -eq 1 ]; then
        echo "${all[@]}"
        exit
    fi
    
    current_weather "${all[@]}"
    future_weather "${all[@]}"
}



## ###########################
## ##### WEATHER OPTIONS #####
## ###########################

## Weather options
function main {
    
    ## Default zipcode
    local defzip="02215"
    
    ## Check user input
    case "$1" in

        ## Show the Help Screen
        "-h") 
	          help_screen
	          exit
	          ;;

        ## Print the Weather Information
        "-p") 

              ## Check internet connection 
              if `is_connected`; then
                  :
              else
                  echo 'ERROR: No internet connection detected'
                  exit
              fi
              
              ## Check zipcode input
	          if [[ "$2" == '' ]]; then 
                  local zip="$defzip"
              else 
                  
                  ## Define zipcode and future hours
                  if [ ${#2} -lt 5 ]; then
                      local zip="$defzip"
                      local hours="$2"
                  else
                      local zip="$2"
                      local hours="$3"
                  fi
              fi
              
              ## Print weather information 
              weather_info "$zip" "$hours"
              ;;
        
        ## Print Syntax Error
        *) 
            echo -e "ERROR: Incorrect syntax used. See the following for correct syntax""\n"
            help_screen
	        exit
	        ;;
    esac    
}



## ---------------------------------------
## ----- DISPLAY WEATHER INFORMATION ----- 
## ---------------------------------------

main "$@"
